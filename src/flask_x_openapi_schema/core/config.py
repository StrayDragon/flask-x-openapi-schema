"""
Configuration management for OpenAPI schema generation.

This module provides configuration classes and utilities for managing
parameter prefixes and other settings for OpenAPI schema generation.
"""

import threading
from dataclasses import dataclass, field
from typing import Dict, Any

# Default parameter prefixes
DEFAULT_BODY_PREFIX = "_x_body"
DEFAULT_QUERY_PREFIX = "_x_query"
DEFAULT_PATH_PREFIX = "_x_path"
DEFAULT_FILE_PREFIX = "_x_file"

# Default OpenAPI info
DEFAULT_TITLE = "API Documentation"
DEFAULT_VERSION = "1.0.0"
DEFAULT_DESCRIPTION = "API Documentation generated by flask-x-openapi-schema"


@dataclass(frozen=True)
class ConventionalPrefixConfig:
    """Configuration class for OpenAPI parameter prefixes.

    This class holds configuration settings for parameter prefixes used in
    binding request data to function parameters.

    :param request_body_prefix: Prefix for request body parameters (default: "_x_body")
    :type request_body_prefix: str
    :param request_query_prefix: Prefix for query parameters (default: "_x_query")
    :type request_query_prefix: str
    :param request_path_prefix: Prefix for path parameters (default: "_x_path")
    :type request_path_prefix: str
    :param request_file_prefix: Prefix for file parameters (default: "_x_file")
    :type request_file_prefix: str
    :param extra_options: Additional configuration options
    :type extra_options: Dict[str, Any]

    Example:
        >>> from flask_x_openapi_schema import ConventionalPrefixConfig
        >>> config = ConventionalPrefixConfig(
        ...     request_body_prefix="req_body",
        ...     request_query_prefix="req_query",
        ...     request_path_prefix="req_path",
        ...     request_file_prefix="req_file"
        ... )
    """

    request_body_prefix: str = DEFAULT_BODY_PREFIX
    request_query_prefix: str = DEFAULT_QUERY_PREFIX
    request_path_prefix: str = DEFAULT_PATH_PREFIX
    request_file_prefix: str = DEFAULT_FILE_PREFIX
    extra_options: Dict[str, Any] = field(default_factory=dict)


@dataclass(frozen=True)
class OpenAPIConfig:
    """Configuration class for OpenAPI schema generation.

    This class holds configuration settings for OpenAPI schema generation.

    Attributes:
        title: API title
        version: API version
        description: API description
        prefix_config: Parameter prefix configuration
        security_schemes: Security schemes configuration
    """

    title: str = DEFAULT_TITLE
    version: str = DEFAULT_VERSION
    description: str = DEFAULT_DESCRIPTION
    prefix_config: ConventionalPrefixConfig = field(
        default_factory=ConventionalPrefixConfig
    )
    security_schemes: Dict[str, Dict[str, Any]] = field(default_factory=dict)


# Global configuration instance with thread safety
class ThreadSafeConfig:
    """Thread-safe configuration holder."""

    def __init__(self):
        self._prefix_config = ConventionalPrefixConfig()
        self._openapi_config = OpenAPIConfig()
        self._lock = threading.RLock()

    def get(self) -> ConventionalPrefixConfig:
        """Get the current prefix configuration."""
        with self._lock:
            # Return a copy to prevent modification
            return ConventionalPrefixConfig(
                request_body_prefix=self._prefix_config.request_body_prefix,
                request_query_prefix=self._prefix_config.request_query_prefix,
                request_path_prefix=self._prefix_config.request_path_prefix,
                request_file_prefix=self._prefix_config.request_file_prefix,
                extra_options=dict(self._prefix_config.extra_options),
            )

    def get_openapi_config(self) -> OpenAPIConfig:
        """Get the current OpenAPI configuration."""
        with self._lock:
            # Return a copy to prevent modification
            return OpenAPIConfig(
                title=self._openapi_config.title,
                version=self._openapi_config.version,
                description=self._openapi_config.description,
                prefix_config=self.get(),
                security_schemes=dict(self._openapi_config.security_schemes),
            )

    def set(self, config: ConventionalPrefixConfig) -> None:
        """Set a new prefix configuration."""
        with self._lock:
            self._prefix_config = ConventionalPrefixConfig(
                request_body_prefix=config.request_body_prefix,
                request_query_prefix=config.request_query_prefix,
                request_path_prefix=config.request_path_prefix,
                request_file_prefix=config.request_file_prefix,
                extra_options=dict(config.extra_options),
            )

    def set_openapi_config(self, config: OpenAPIConfig) -> None:
        """Set a new OpenAPI configuration."""
        with self._lock:
            self._openapi_config = OpenAPIConfig(
                title=config.title,
                version=config.version,
                description=config.description,
                prefix_config=config.prefix_config,
                security_schemes=dict(config.security_schemes),
            )
            # Also update prefix config
            self.set(config.prefix_config)

    def reset(self) -> None:
        """Reset to default prefix configuration."""
        with self._lock:
            self._prefix_config = ConventionalPrefixConfig(
                request_body_prefix=DEFAULT_BODY_PREFIX,
                request_query_prefix=DEFAULT_QUERY_PREFIX,
                request_path_prefix=DEFAULT_PATH_PREFIX,
                request_file_prefix=DEFAULT_FILE_PREFIX,
                extra_options={},
            )

    def reset_all(self) -> None:
        """Reset all configurations to defaults."""
        with self._lock:
            self.reset()
            self._openapi_config = OpenAPIConfig()


# Create a singleton instance
GLOBAL_CONFIG_HOLDER = ThreadSafeConfig()


def configure_prefixes(config: ConventionalPrefixConfig) -> None:
    """Configure global parameter prefixes.

    Sets the global configuration for parameter prefixes used in binding request data
    to function parameters. This affects all decorators that don't specify their own
    prefix configuration.

    :param config: Configuration object with parameter prefixes
    :type config: ConventionalPrefixConfig
    :return: None

    Example:
        >>> from flask_x_openapi_schema import ConventionalPrefixConfig, configure_prefixes
        >>> custom_config = ConventionalPrefixConfig(
        ...     request_body_prefix="req_body",
        ...     request_query_prefix="req_query"
        ... )
        >>> configure_prefixes(custom_config)
    """
    # Update the configuration in a thread-safe manner
    GLOBAL_CONFIG_HOLDER.set(config)


def configure_openapi(config: OpenAPIConfig) -> None:
    """Configure global OpenAPI settings.

    Args:
        config: Configuration object with OpenAPI settings
    """
    # Update the configuration in a thread-safe manner
    GLOBAL_CONFIG_HOLDER.set_openapi_config(config)


def reset_prefixes() -> None:
    """Reset parameter prefixes to default values.

    Resets the global parameter prefix configuration to the default values:
    - request_body_prefix: "_x_body"
    - request_query_prefix: "_x_query"
    - request_path_prefix: "_x_path"
    - request_file_prefix: "_x_file"

    :return: None

    Example:
        >>> from flask_x_openapi_schema import reset_prefixes
        >>> reset_prefixes()  # Resets to default prefixes
    """
    # Reset the configuration in a thread-safe manner
    GLOBAL_CONFIG_HOLDER.reset()


def reset_all_config() -> None:
    """Reset all configuration to default values."""
    # Reset the configuration in a thread-safe manner
    GLOBAL_CONFIG_HOLDER.reset_all()


def get_openapi_config() -> OpenAPIConfig:
    """Get the current OpenAPI configuration.

    Returns:
        Current OpenAPI configuration
    """
    return GLOBAL_CONFIG_HOLDER.get_openapi_config()
